#include "expressio.hpp"

list<token> _lt;

struct node
{
  node *f_esq;
  node *f_dret;
  token _info;
};
node *_arrel;

// totes les operacions que es necessiten:

token operacio_corrent(token op, token a, token b);

// en aquestes operacions s ha de posar error, pq no es por fer l arrel d un nombre negatiu per exemple

token logaritme(token op) throw(error);

token exponencial(token op) throw(error);

token arrel(token op) throw(error);

expressio constructora_op(token t, expressio a, expressio b);

static node *copia_nodes(node *m)
{
  if (m == NULL)
    return NULL;

  node *c = new node;
  c->_info = m->_info;
  c->f_esq = copia_nodes(m->f_esq);
  c->f_dret = copia_nodes(m->f_dret);

  return c;
}

static void esborra_nodes(node *m)
{
  if (m == NULL)
    return;

  // Recursively delete the left and right subtrees
  esborra_nodes(m->f_esq);
  esborra_nodes(m->f_dret);

  // Delete the current node
  delete m;
}

bool es_operand(token t);

bool es_operador(token t);

void printl(list<token> l);

// Abin<T> &operator=(const Abin<T> &a);

bool es_buit;