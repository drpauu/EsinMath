#include "expressio.hpp"
#include <iostream>
// #include "math_io.hpp"

list<token> _lt;

struct node
{
  node *f_esq;
  node *f_dret;
  token _info;
};
node *_arrel;

// totes les operacions que es necessiten:

token operacio_corrent(token op, token a, token b);

// en aquestes operacions s ha de posar error, pq no es por fer l arrel d un nombre negatiu per exemple

expressio logaritme(expressio op);

expressio exp_funct(expressio op);

expressio func_sqrt(expressio op);

expressio constructora_op(token t, expressio a, expressio b); // here

expressio constructor_especial(token t, expressio e); // here

static node *copia_nodes(node *m)
{
  if (m == NULL)
    return NULL;

  node *c = new node;
  c->_info = m->_info;
  c->f_esq = copia_nodes(m->f_esq);
  c->f_dret = copia_nodes(m->f_dret);

  return c;
};

int morfosintactico(list<token> &lt); // retorna el tipus d error sintatic que hi ha 


// Regla 0
expressio c_racional(expressio a);

int que_eres(token t);

expressio suma(expressio a, expressio b); // mirar warnings

expressio resta(expressio a, expressio b); // mirar warnings

expressio multiplicacio(expressio a, expressio b);

expressio divisio(expressio a, expressio b) throw (error);

expressio exponenciacio(expressio a, expressio b) throw (error);

expressio canvi_de_signe(expressio a);

void set_right_child(node *n);
void set_left_child(node *n);

static void esborra_nodes(node *m)
{
  if (m == NULL)
    return;

  // Recursively delete the left and right subtrees
  esborra_nodes(m->f_esq);
  esborra_nodes(m->f_dret);

  // Delete the current node
  delete m;
};

static bool is_open_parenthesis(token token)
{
  return token.tipus() == token::OBRIR_PAR;
}

static bool is_close_parenthesis(token token)
{
  return token.tipus() == token::TANCAR_PAR;
}

// bool funcio(token t);

static bool es_operand(token t); // here

// bool es_operador(token t); // here

void printl(list<token> l);

// Abin<T> &operator=(const Abin<T> &a);

bool es_buit;

static void tree_to_list(node *n, list<token> &l);